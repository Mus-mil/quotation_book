// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "quotetion_book/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuotationService is a mock of QuotationService interface.
type MockQuotationService struct {
	ctrl     *gomock.Controller
	recorder *MockQuotationServiceMockRecorder
}

// MockQuotationServiceMockRecorder is the mock recorder for MockQuotationService.
type MockQuotationServiceMockRecorder struct {
	mock *MockQuotationService
}

// NewMockQuotationService creates a new mock instance.
func NewMockQuotationService(ctrl *gomock.Controller) *MockQuotationService {
	mock := &MockQuotationService{ctrl: ctrl}
	mock.recorder = &MockQuotationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotationService) EXPECT() *MockQuotationServiceMockRecorder {
	return m.recorder
}

// AddQuote mocks base method.
func (m *MockQuotationService) AddQuote(quote models.QuoteBook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuote", quote)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddQuote indicates an expected call of AddQuote.
func (mr *MockQuotationServiceMockRecorder) AddQuote(quote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuote", reflect.TypeOf((*MockQuotationService)(nil).AddQuote), quote)
}

// DeleteQuotesFromID mocks base method.
func (m *MockQuotationService) DeleteQuotesFromID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuotesFromID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuotesFromID indicates an expected call of DeleteQuotesFromID.
func (mr *MockQuotationServiceMockRecorder) DeleteQuotesFromID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuotesFromID", reflect.TypeOf((*MockQuotationService)(nil).DeleteQuotesFromID), id)
}

// GetAllQuotes mocks base method.
func (m *MockQuotationService) GetAllQuotes() ([]models.QuoteBookID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuotes")
	ret0, _ := ret[0].([]models.QuoteBookID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuotes indicates an expected call of GetAllQuotes.
func (mr *MockQuotationServiceMockRecorder) GetAllQuotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuotes", reflect.TypeOf((*MockQuotationService)(nil).GetAllQuotes))
}

// GetQuotesFromAuthor mocks base method.
func (m *MockQuotationService) GetQuotesFromAuthor(author string) ([]models.QuoteBookID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotesFromAuthor", author)
	ret0, _ := ret[0].([]models.QuoteBookID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotesFromAuthor indicates an expected call of GetQuotesFromAuthor.
func (mr *MockQuotationServiceMockRecorder) GetQuotesFromAuthor(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotesFromAuthor", reflect.TypeOf((*MockQuotationService)(nil).GetQuotesFromAuthor), author)
}

// GetRandomQuote mocks base method.
func (m *MockQuotationService) GetRandomQuote() (models.QuoteBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote")
	ret0, _ := ret[0].(models.QuoteBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuotationServiceMockRecorder) GetRandomQuote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuotationService)(nil).GetRandomQuote))
}
